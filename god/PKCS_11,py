from cryptography.hazmat.primitives.asymmetric import rsa, padding as asym_padding
from cryptography.hazmat.primitives import serialization, hashes
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.primitives import padding as sym_padding
from cryptography.hazmat.backends import default_backend
import os

# Generar un par de claves RSA localmente
private_key = rsa.generate_private_key(public_exponent=65537, key_size=2048, backend=default_backend())
public_key = private_key.public_key()

# Mostrar la clave pública simulando un token
print("Token simulado (clave pública):")
print(public_key.public_bytes(
    encoding=serialization.Encoding.PEM,
    format=serialization.PublicFormat.SubjectPublicKeyInfo
).decode())

# Generar una clave AES para cifrar el mensaje
aes_key = os.urandom(32)
iv = os.urandom(16)
message = input("Introduce el mensaje que deseas cifrar: ").encode()

# Cifrar el mensaje con AES
cipher = Cipher(algorithms.AES(aes_key), modes.CFB(iv), backend=default_backend())
encryptor = cipher.encryptor()
padder = sym_padding.PKCS7(algorithms.AES.block_size).padder()
padded_message = padder.update(message) + padder.finalize()
ciphertext = encryptor.update(padded_message) + encryptor.finalize()

# Cifrar la clave AES con la clave pública RSA
encrypted_aes_key = public_key.encrypt(
    aes_key,
    asym_padding.OAEP(
        mgf=asym_padding.MGF1(algorithm=hashes.SHA256()),
        algorithm=hashes.SHA256(),
        label=None
    )
)

# Mostrar que el mensaje y la clave AES han sido cifrados
print("Mensaje cifrado y clave AES cifrada guardados.")

# Descifrar la clave AES utilizando la clave privada RSA
decrypted_aes_key = private_key.decrypt(
    encrypted_aes_key,
    asym_padding.OAEP(
        mgf=asym_padding.MGF1(algorithm=hashes.SHA256()),
        algorithm=hashes.SHA256(),
        label=None
    )
)

# Mostrar la clave AES descifrada
print("Clave AES descifrada:", decrypted_aes_key.hex())

# Descifrar el mensaje
decryptor = cipher.decryptor()
decrypted_padded_message = decryptor.update(ciphertext) + decryptor.finalize()
unpadder = sym_padding.PKCS7(algorithms.AES.block_size).unpadder()
decrypted_message = unpadder.update(decrypted_padded_message) + unpadder.finalize()

# Mostrar el mensaje descifrado
print("Mensaje descifrado:", decrypted_message.decode())
